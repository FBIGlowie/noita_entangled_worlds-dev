name: release

on: [push, pull_request, workflow_dispatch]
jobs:
  build-mod:
    runs-on: ubuntu-22.04
    name: Build mod and ewext
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: i686-pc-windows-gnu
      - name: Install extra deps
        run: sudo apt-get install -y gcc-mingw-w64-i686
      
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ewext -> target
      
      - name: Build ewext
        run: cargo build --release --target i686-pc-windows-gnu
        working-directory: ./ewext
      - name: Copy ewext
        run: cp ewext/target/i686-pc-windows-gnu/release/ewext.dll quant.ew/ewext0.dll

      - name: Create archive
        run: python scripts/ci_make_archives.py mod
      
      - uses: actions/upload-artifact@v4
        with:
          name: quant.ew.zip
          path: target/quant.ew.zip

  build-proxy-linux:
    name: Build proxy for linux
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu
      - name: Install extra deps
        run: sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev gcc-mingw-w64-i686 gcc-mingw-w64
      
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: noita-proxy -> target
      
      - name: Build Linux proxy release
        run: cargo build --release
        working-directory: ./noita-proxy

      - name: Create archives
        run: python scripts/ci_make_archives.py linux
      
      - uses: actions/upload-artifact@v4
        with:
          name: noita-proxy-linux.zip
          path: target/noita-proxy-linux.zip
    
  build-proxy-windows:
    name: Build proxy for windows
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu
      - name: Install extra deps
        run: sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev gcc-mingw-w64-i686 gcc-mingw-w64
      
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: noita-proxy -> target
      
      - name: Build Windows proxy release
        run: cargo build --release --target x86_64-pc-windows-gnu
        working-directory: ./noita-proxy

      - name: Create archives
        run: python scripts/ci_make_archives.py windows
      
      - uses: actions/upload-artifact@v4
        with:
          name: noita-proxy-win.zip
          path: target/noita-proxy-win.zip

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    needs: [build-mod, build-proxy-linux, build-proxy-windows]

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: last_release_notes.md
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - uses: ncipollo/release-action@v1
        with:
          #draft: true
          artifacts: "*.zip"
          bodyFile: last_release_notes.md


  update-flake:
    name: Update Flake with Latest Version and SHA256 Hash
    runs-on: ubuntu-22.04
    needs: build-proxy-linux

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix Package Manager
        uses: cachix/install-nix-action@v20
        
      - name: Get latest release
        id: get_release
        uses: octokit/request-action@v2.x
        with:
          route: GET repos/IntQuant/noita_entangled_worlds/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(echo '${{ steps.get_release.outputs.data }}' | jq -r .tag_name)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: noita-proxy-linux.zip

      - name: Calc sha of zip
        id: calculate-sha256-hash
        run: |
          HASH=$(nix hash file noita-proxy-linux.zip)
          echo "sha256=$HASH" >> $GITHUB_ENV

      - name: Update Flake
        run: |
          sed -i '/latest = {/!b;n;c\\tver = \"${{ steps.extract_version.outputs.VERSION }}\";' flake.nix
          sed -i '/latest = {/!b;n;n;c\\tsha256 = \"${{ env.sha256 }}\";' flake.nix
          cat flake.nix

      - name: Update flake
        run: nix flake update

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add flake.nix
          git commit -m "Update flake.nix with latest version ${LATEST_VERSION_NAME}"
          git push origin HEAD:${{ github.ref_name }}
  
